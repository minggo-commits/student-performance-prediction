# -*- coding: utf-8 -*-
"""Student performance prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w75HFzRRC6G1LsYXbey0nzx4L7p6LY8u

# Student performance prediction

Informasi Dataset:

Link: https://www.kaggle.com/datasets/rkiattisak/student-performance-in-mathematics/data

• Gender: The gender of the student (male/female)

• Race/ethnicity: The student's racial or ethnic background (Asian, African-American, Hispanic, etc.)

• Parental level of education: The highest level of education attained by the student's parent(s) or guardian(s)

• Lunch: Whether the student receives free or reduced-price lunch (yes/no)

• Test preparation course: Whether the student completed a test preparation course (yes/no)

• Math score: The student's score on a standardized mathematics test

• Reading score: The student's score on a standardized reading test

• Writing score: The student's score on a standardized writing test

Target

 average_score = math score + reading score + writing score / 3 (Feature Engineering)

###Data Understanding

**Data Loading**

Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import kagglehub
import shutil
import os

"""Download Dataset dari Kaggle"""

path = kagglehub.dataset_download("rkiattisak/student-performance-in-mathematics")
print("Path to dataset files:", path)
print("Files in dataset folder:")
print(os.listdir(path))

destination_path = "/content"
for file_name in os.listdir(path):
    full_file_name = os.path.join(path, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, destination_path)

print("✅ Dataset berhasil disalin ke /content")
print("Isi folder /content:")
print(os.listdir("/content"))

"""Load Data"""

df = pd.read_csv('/content/exams.csv')

df.head(5)

"""###Exploratory Data Analysis

Menampilkan Informasi Setiap Variabel
"""

df.info()

"""Mengecek Deskripsi statistik data"""

df.describe()

df.describe(include='object')

"""**Exploratory Data Analysis - Missing Value dan Outliers**

Memeriksa Missing Vallue
"""

df.isna().sum()

df.shape

"""Memeriksa Outliers"""

pastel_colors = sns.color_palette("pastel", 12)
plt.figure(figsize=(12, 8))
cols = [
'math score','reading score','writing score'
]

for i, col in enumerate(cols):
    plt.subplot(4, 3, i + 1)
    sns.boxplot(x=df[col], color=pastel_colors[i])
    plt.title(f'Boxplot of {col}', fontsize=10)

plt.tight_layout()
plt.show()

"""**Exploratory Data Analysis - Univariate Analysis (Categorical)**"""

numerical_features = ['math score','reading score','writing score']
categorical_features = [
'gender',
'race/ethnicity',
'parental level of education',
'lunch',
'test preparation course',
]

"""Fitur Gender"""

feature = categorical_features[0]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
count_percent = pd.DataFrame({'count':count, 'percent':percent})
print(count_percent)
count.plot(kind='bar', title=feature)

"""Fitur ras"""

feature = categorical_features[1]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
count_percent = pd.DataFrame({'count':count, 'percent':percent})
print(count_percent)
count.plot(kind='bar', title=feature)

"""Fitur Level pendidikan orangtua"""

feature = categorical_features[2]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
count_percent = pd.DataFrame({'count':count, 'percent':percent})
print(count_percent)
count.plot(kind='bar', title=feature)

"""Fitur Jenis makan siang"""

feature = categorical_features[3]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
count_percent = pd.DataFrame({'count':count, 'percent':percent})
print(count_percent)
count.plot(kind='bar', title=feature)

"""Fitur Jenis persiapan tes"""

feature = categorical_features[4]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
count_percent = pd.DataFrame({'count':count, 'percent':percent})
print(count_percent)
count.plot(kind='bar', title=feature)

"""**Exploratory Data Analysis - Univariate Analysis (Numerical)**"""

df.hist(bins=50, figsize=(20,15))
plt.show()

"""**Exploratory Data Analysis - Multivariate Analysis (Categorical terhadap target)**

Membuat Target
"""

df['average_score'] = (df['math score'] + df['reading score'] + df['writing score']) / 3

"""Visualisasi"""

cat_features = df.select_dtypes(include='object').columns.to_list()

for col in cat_features:
  sns.catplot(x=col, y="average_score", kind="bar", dodge=False, height = 4, aspect = 3,  data=df, palette="Set3")
  plt.title("Rata-rata 'skor' Relatif terhadap - {}".format(col))

"""**Exploratory Data Analysis - Multivariate Analysis (Categorical terhadap target)**

Visualisasi
"""

sns.pairplot(df, diag_kind= 'kde')

"""Matrix Korelasi"""

plt.figure(figsize=(10, 8))
correlation_matrix = df[numerical_features].corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""###Data Preparation

Feature engineering for target (y)

> Fitur telah ditambahkan pada saat proses EDA Multivariate
"""

# df['average_score'] = (df['math score'] + df['reading score'] + df['writing score']) / 3

df

"""Encoding Fitur Kategori"""

from sklearn.preprocessing import OneHotEncoder
df = pd.concat([df, pd.get_dummies(df['gender'],prefix='gender')],axis=1)
df = pd.concat([df, pd.get_dummies(df['race/ethnicity'],prefix='race/ethnicity')],axis=1)
df = pd.concat([df, pd.get_dummies(df['parental level of education'],prefix='parental level of education')],axis=1)
df = pd.concat([df, pd.get_dummies(df['lunch'],prefix='lunch')],axis=1)
df = pd.concat([df, pd.get_dummies(df['test preparation course'],prefix='test preparation course')],axis=1)

df.drop(['gender','race/ethnicity','parental level of education','lunch','test preparation course'],axis=1,inplace=True)
df.head()

"""Reduksi Dimensi dengan PCA"""

sns.pairplot(df[['math score','reading score','writing score']], plot_kws={"s": 3});

"""Hasil reduksi"""

from sklearn.decomposition import PCA

pca = PCA(n_components=3, random_state=123)
pca.fit(df[['math score','reading score','writing score']])
princ_comp = pca.transform(df[['math score','reading score','writing score']])

pca.explained_variance_ratio_.round(3)

from sklearn.decomposition import PCA
pca = PCA(n_components=1, random_state=123)
pca.fit(df[['math score','reading score','writing score']])
df['student performance'] = pca.transform(df.loc[:, ('math score','reading score','writing score')]).flatten()
df.drop(['math score','reading score','writing score'], axis=1, inplace=True)

df

"""**Train-Test-Split**"""

from sklearn.model_selection import train_test_split

X = df.drop(["average_score"],axis =1)
y = df["average_score"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""**Standarisasi**"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['student performance']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""###Model Development

Inisialisasi Model dan Evaluasi
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""Model KNN"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""Model Random Forest"""

from sklearn.ensemble import RandomForestRegressor
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""Model AdaBoostRegressor"""

from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""###Evaluasi

Hitung Mean Squared Error masing-masing algoritma pada data train dan test
"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

"""Visualisasi"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Testing"""

prediksi = X_test.iloc[:10].copy()
pred_dict = {'y_true':y_test[:10]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)